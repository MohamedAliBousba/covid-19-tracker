{"version":3,"sources":["components/Chart/chart.module.css","components/CountryPicker/country.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","COVID-19.png","App.js","reportWebVitals.js","index.js","components/Cards/cards.module.css"],"names":["module","exports","useStyles","makeStyles","root","Cards","data","classes","confirmed","deaths","recovered","lastUpdate","className","Grid","container","spacing","item","component","Card","style","margin","xs","md","clsx","styles","card","infected","CardContent","Typography","color","gutterBottom","end","value","duration","separator","Date","toDateString","variant","url","fetchData","country","a","updatedUrl","axios","get","updatedData","fetchDailyData","res","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","then","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","selectCountryHandler","fetchedCountries","setFetchedCountries","selection","setSelection","FormControl","formControl","Select","labelId","id","onChange","e","target","MenuItem","App","setData","setCountry","fetchedData","src","image","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b54877b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__2bK0m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"country_formControl__Ux2fE\",\"option\":\"country_option__Er3Oj\"};","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport CountUp from \"react-countup\";\r\nimport styles from \"./cards.module.css\"\r\nimport clsx from \"clsx\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n\r\n    },\r\n}));\r\n\r\nconst Cards = ({ data }) => {\r\n    const classes = useStyles();\r\n\r\n    if(!data || !data.confirmed || !data.deaths || !data.recovered || !data.lastUpdate){\r\n        return <p>Loading...</p>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item component={Card} style={{ margin: \"10px 20px\" }} xs={12}  md={3} className={clsx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <CountUp end={data.confirmed.value} duration={2.5} separator=\",\" />\r\n                        <Typography color=\"textSecondary\">{ new Date(data.lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} style={{ margin: \"10px 20px\" }} xs={12}  md={3}  className={clsx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <CountUp end={data.recovered.value} duration={2.5} separator=\",\" />\r\n                        <Typography color=\"textSecondary\">{ new Date(data.lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\">Number of recovered cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} style={{ margin: \"10px 20px\" }} xs={12}  md={3}  className={clsx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <CountUp end={data.deaths.value} duration={2.5} separator=\",\" />\r\n                        <Typography color=\"textSecondary\">{ new Date(data.lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\"\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const fetchData = async (country) => {\r\n    let updatedUrl = url\r\n\r\n    if(country){\r\n        updatedUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    if(country === \"Global\"){\r\n        updatedUrl = url\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(updatedUrl)\r\n\r\n        const updatedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }\r\n\r\n        return updatedData\r\n    }catch(err){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const res = await axios.get(`${url}/daily`)\r\n\r\n        const updatedData = res.data.map(dailyData => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n\r\n        return updatedData\r\n    } catch(err) {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const { data: { countries } } = await axios.get(`${url}/countries`)\r\n\r\n        return countries.map(country => country.name)\r\n    }catch (e) {\r\n\r\n    }\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {fetchDailyData} from \"../../api\";\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n\r\nimport styles from \"./chart.module.css\"\r\n\r\nconst Chart = ({ data, country }) => {\r\n    const [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetchDailyData()\r\n            .then(res => {\r\n                setDailyData(res)\r\n            })\r\n    }, [])\r\n\r\n    const barChart = (\r\n        data && data.confirmed && data.recovered && data.deaths && (\r\n            <Bar data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label: \"People\",\r\n                    backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                    data: [data.confirmed.value, data.recovered.value, data.deaths.value]\r\n                }],\r\n            }}\r\n            options={{\r\n                legend: { display: false },\r\n                title: { display: true, text: `Current state in ${country}` }\r\n            }}/>\r\n        )\r\n    )\r\n\r\n    const lineChart = (\r\n        dailyData.length && (\r\n            <Line data={{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: \"#3333ff\",\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: \"red\",\r\n                    backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                    fill: true\r\n                }]\r\n            }} />\r\n        )\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            { country ? barChart : lineChart }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n","import React, {useEffect, useState} from 'react';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nimport styles from \"./country.module.css\"\r\n\r\nimport {fetchCountries} from \"../../api\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst CountryPicker = ({selectCountryHandler}) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n    const [selection, setSelection] = useState('Global')\r\n\r\n    useEffect(() => {\r\n        fetchCountries()\r\n            .then(res => {\r\n                setFetchedCountries(res)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <Select\r\n                labelId=\"demo-controlled-open-select-label\"\r\n                id=\"demo-controlled-open-select\"\r\n                value={selection}\r\n                onChange={e => {\r\n                    selectCountryHandler(e.target.value)\r\n                    setSelection(e.target.value)\r\n                }}\r\n            >\r\n                <MenuItem value=\"Global\">Global</MenuItem>\r\n                {fetchedCountries.map(country => (\r\n                    <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default CountryPicker;\r\n","export default __webpack_public_path__ + \"static/media/COVID-19.1e6212e9.png\";","import Cards from \"./components/Cards/Cards\";\nimport Chart from \"./components/Chart/Chart\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\nimport React, {useEffect, useState} from \"react\";\nimport image from './COVID-19.png'\n\nimport { fetchData } from './api/index'\n\nconst App = () => {\n\n    const [data, setData] = useState({})\n    const [country, setCountry] = useState('')\n\n    useEffect(() => {\n        fetchData()\n            .then(res => {\n                setData(res)\n            })\n    }, [])\n\n\n    const selectCountryHandler = async (country) => {\n        setCountry(country)\n        if(country === 'Global'){\n            setCountry('')\n        }\n        const fetchedData = await fetchData(country)\n        setData(fetchedData)\n    }\n\n  return (\n    <div className=\"container\">\n        <img src={image} alt=\"covid-19\" className=\"image\"/>\n        <Cards data={data} />\n        <CountryPicker selectCountryHandler={selectCountryHandler} />\n        <Chart data={data} country={country} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"cards_card__2BGd5\",\"container\":\"cards_container__e0i0W\",\"infected\":\"cards_infected__1Di7e\",\"recovered\":\"cards_recovered__1NiX7\",\"deaths\":\"cards_deaths__Yg9Y7\"};"],"sourceRoot":""}